// This file was generated by typeinst. Do not edit, use `go generate` instead.
package usage

import (
 fmt1 "fmt"
 log "log"
)

type Ints []int

func NewInts() Ints {
 return nil
}

func WithCapInts(a int) Ints {
 f := NewInts
 return f()
}

func (a Ints) IndexOf(el int) int {
 for i, v := range a {
  if v == el {
   return i
  }
 }
 return -1
}

func (a Ints) WithCap() {
}

func (a *Ints) Contains(el int) bool {
 return a.IndexOf(el) >= 0
}

func (a Ints) AppendUniq(el int) Ints {
 if a.IndexOf(el) < 0 {
  return append(a, el)
 }
 return a
}

type Floats []float64

func NewFloats() Floats {
 return nil
}

func WithCapFloats(a int) Floats {
 f := NewFloats
 return f()
}

func (a Floats) IndexOf(el float64) int {
 for i, v := range a {
  if v == el {
   return i
  }
 }
 return -1
}

func (a Floats) WithCap() {
}

func (a *Floats) Contains(el float64) bool {
 return a.IndexOf(el) >= 0
}

func (a Floats) AppendUniq(el float64) Floats {
 if a.IndexOf(el) < 0 {
  return append(a, el)
 }
 return a
}

func (a Floats) FilterInplace(f func(float64) bool) Floats {
 var d []float64 = a[:0]
 for _, v := range a {
  if f(v) {
   d = append(d, v)
  }
 }
 if len(d) == 0 {
  return nil
 }
 return d
}

func (a Floats) FilterInplaceZ(f func(float64) bool, zero float64) Floats {
 log.Printf("Hello")
 fmt1.Printf("Hello")
 d := a.FilterInplace(f)
 k := len(d)
 if k != 0 && k != len(a) {
  tail := a[k:]
  for i, _ := range tail {
   tail[i] = zero
  }
 }
 return d
}

type Dict map[string][][][]struct{}

func (m Dict) KeyValues(keys *[]string, values *[][][][]struct{}) {
 for k, v := range m {
  if keys != nil {
   *keys = append(*keys, k)
  }
  if values != nil {
   *values = append(*values, v)
  }
 }
}

type BigTreeNode struct {
 key  int64
 val  interface{}
 h    int
 next **BigTreeNode
}

type BigTree struct {
 l   *BigTreeNode
 r   *BigTreeNode
 len int
}

func newBigTree() *BigTree {
 return nil
}

func createBigTree(keys []int64, values []interface{}) *BigTree {
 return nil
}

func (t *BigTree) Put(k int64, v interface{}) {
}

