// This file was generated by typeinst. Do not edit, use "go generate" instead.
// nolint
package main

import (
 ast "go/ast"
)

type StrSet map[string]struct{}

func NewStrSet() StrSet {
 return make(map[string]struct{})
}

func (s StrSet) Add(elem string) StrSet {
 s[elem] = struct{}{}
 return s
}

func (s StrSet) AddMany(a ...string) StrSet {
 for _, x := range a {
  s[x] = struct{}{}
 }
 return s
}

func (s StrSet) Contains(elem string) bool {
 _, ok := s[elem]
 return ok
}

func (s StrSet) Copy() StrSet {
 m := make(map[string]struct{})
 for k := range s {
  m[k] = struct{}{}
 }
 return m
}

func (s StrSet) AddSet(other StrSet) {
 for k := range other {
  s[k] = struct{}{}
 }
}

func (s StrSet) Subtract(other StrSet) {
 for k := range other {
  delete(s, k)
 }
}

func (s StrSet) ToSlice() []string {
 a := make([]string, 0, len(s))
 for k := range s {
  a = append(a, k)
 }
 return a
}

type AstIdentSet map[*ast.Ident]struct{}

func NewAstIdentSet() AstIdentSet {
 return make(map[*ast.Ident]struct{})
}

func (s AstIdentSet) Add(elem *ast.Ident) AstIdentSet {
 s[elem] = struct{}{}
 return s
}

func (s AstIdentSet) AddMany(a ...*ast.Ident) AstIdentSet {
 for _, x := range a {
  s[x] = struct{}{}
 }
 return s
}

func (s AstIdentSet) Contains(elem *ast.Ident) bool {
 _, ok := s[elem]
 return ok
}

func (s AstIdentSet) Copy() AstIdentSet {
 m := make(map[*ast.Ident]struct{})
 for k := range s {
  m[k] = struct{}{}
 }
 return m
}

func (s AstIdentSet) AddSet(other AstIdentSet) {
 for k := range other {
  s[k] = struct{}{}
 }
}

func (s AstIdentSet) Subtract(other AstIdentSet) {
 for k := range other {
  delete(s, k)
 }
}

func (s AstIdentSet) ToSlice() []*ast.Ident {
 a := make([]*ast.Ident, 0, len(s))
 for k := range s {
  a = append(a, k)
 }
 return a
}

